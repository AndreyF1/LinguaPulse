// linguapulse-test-bot worker.js
// Telegram webhook + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç + D1 (USER_DB) –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è + KV –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (TEST_KV)
// –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Cloudflare

export default {
  async fetch(request, env, ctx) {
    if (request.method === 'POST') {
      const update = await request.json().catch(() => ({}));
      ctx.waitUntil(handleUpdate(update, env, ctx));
      return new Response('OK');
    }
    return new Response('Welcome to LinguaPulseBot', { status: 200 });
  }
};

// –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ KV
const STATE_PREFIX = 'state:';

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleUpdate(update, env, ctx) {
  const chatId = update.message?.chat?.id || update.callback_query?.message?.chat?.id;
  if (!chatId) return;

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram API
  const callT = (method, payload = {}) =>
    fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, ...payload })
    });

  const sendMessage = (text, keyboard) => {
    const opts = { text, parse_mode: 'Markdown' };
    if (keyboard) opts.reply_markup = { inline_keyboard: keyboard };
    return callT('sendMessage', opts);
  };

  const ack = (callbackId) =>
    callT('answerCallbackQuery', { callback_query_id: callbackId });

  const ask = (text, options) => {
    const kb = options.map(o => [{ text: o, callback_data: `next:${o}` }]);
    return sendMessage(text, kb);
  };

  // KV —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const kv = env.TEST_KV;
  const stateKey = STATE_PREFIX + chatId;
  const raw = await kv.get(stateKey);
  const allState = raw ? JSON.parse(raw) : {};
  
  // –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ—Å—Ç–∞
  let { 
    questions = [], 
    answers = [], 
    index = 0, 
    currentCategoryIndex = 0,
    categoryCompletionStatus = {
      vocabulary: 0,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      grammar: 0,
      reading: 0
    }
  } = allState;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø–µ—Ä–≤–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
  if (update.message?.text === '/start') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ
    const { results } = await env.USER_DB
      .prepare('SELECT eng_level FROM user_profiles WHERE telegram_id = ?')
      .bind(parseInt(chatId, 10))
      .all();
    
    if (results.length > 0 && results[0].eng_level) {
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      await sendMessage("You've already completed the placement test. Your English level is " + results[0].eng_level + ".\n\nWhat would you like to do next?", [
        [{ text: "Free Audio Lesson", callback_data: "lesson:free" }],
        [{ text: "Retake Test", callback_data: "confirm_retest" }]
      ]);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º
    const isNewUser = results.length === 0;

    // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (isNewUser) {
      await sendMessage(
        "üëã *Welcome to LinguaPulse!*\n\n" +
        "I'm your AI English tutor designed to help you improve your speaking skills through natural conversation.\n\n" +
        "*How it works:*\n" +
        "1Ô∏è‚É£ First, you'll take a short placement test to determine your English level\n" +
        "2Ô∏è‚É£ Then, you'll get audio lessons where we'll practice speaking together\n" +
        "3Ô∏è‚É£ You can learn in a safe and comfortable environment where it's okay to make mistakes\n" +
        "4Ô∏è‚É£ Practice anytime for just 10-15 minutes whenever you have free time\n\n" +
        "Ready to start your English journey? Press the button below!"
      , [[{ text: "Start Placement Test", callback_data: "start_test" }]]);
      
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ —Å—á–∏—Ç–∞–ª—Å—è –Ω–æ–≤—ã–º
      await env.USER_DB
        .prepare(
          `INSERT INTO user_profiles (telegram_id)
           VALUES (?)
           ON CONFLICT(telegram_id) DO NOTHING`
        )
        .bind(parseInt(chatId, 10))
        .run();
      
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞—á–∞—Ç, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Å—Ç
    const { results: testProgress } = await env.USER_DB
      .prepare('SELECT start_test_at FROM user_profiles WHERE telegram_id = ? AND start_test_at IS NOT NULL AND eng_level IS NULL')
      .bind(parseInt(chatId, 10))
      .all();
    
    if (testProgress.length > 0) {
      // –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –Ω–∞—á–∞—Ç, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      const testState = await kv.get(stateKey);
      if (testState) {
        await sendMessage(
          "You have an unfinished test. Would you like to continue where you left off or start a new test?",
          [
            [{ text: "Continue Test", callback_data: "continue_test" }],
            [{ text: "Start New Test", callback_data: "start_test" }]
          ]
        );
        return;
      }
    }

    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–∏–¥–µ–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç)
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
    await sendMessage(
      "Welcome to *LinguaPulse English Placement Test*!\n\n" +
      "This test will help determine your English proficiency level according to the CEFR scale (A1-C2).\n\n" +
      "The test consists of 12 questions:\n" +
      "‚Ä¢ 5 vocabulary questions\n" +
      "‚Ä¢ 5 grammar questions\n" +
      "‚Ä¢ 2 reading comprehension questions\n\n" +
      "Ready to start? Press the button below!"
    , [[{ text: "Start Test", callback_data: "start_test" }]]);
    
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /retest - —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  if (update.message?.text === '/retest') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    const { results } = await env.USER_DB
      .prepare('SELECT eng_level FROM user_profiles WHERE telegram_id = ?')
      .bind(parseInt(chatId, 10))
      .all();
    
    if (results.length > 0 && results[0].eng_level) {
      // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
      await sendMessage(
        `Your current English level is *${results[0].eng_level}*.\n\n` +
        "Are you sure you want to retake the test? Your current level will be overwritten with the new result.",
        [
          [{ text: "Yes, Retake Test", callback_data: "confirm_retest" }],
          [{ text: "No, Keep Current Level", callback_data: "keep_level" }]
        ]
      );
      return;
    } else {
      // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
      await sendMessage(
        "Welcome to *LinguaPulse English Placement Test*!\n\n" +
        "This test will help determine your English proficiency level according to the CEFR scale (A1-C2).\n\n" +
        "The test consists of 12 questions:\n" +
        "‚Ä¢ 5 vocabulary questions\n" +
        "‚Ä¢ 5 grammar questions\n" +
        "‚Ä¢ 2 reading comprehension questions\n\n" +
        "Ready to start? Press the button below!"
      , [[{ text: "Start Test", callback_data: "start_test" }]]);
      return;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
  if (update.callback_query?.data === 'confirm_retest') {
    await ack(update.callback_query.id);
    await sendMessage(
      "You've chosen to retake the test. Your previous level will be overwritten with the new result.",
      [[{ text: "Start Test", callback_data: "start_test" }]]
    );
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  if (update.callback_query?.data === 'keep_level') {
    await ack(update.callback_query.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { results } = await env.USER_DB
      .prepare('SELECT eng_level FROM user_profiles WHERE telegram_id = ?')
      .bind(parseInt(chatId, 10))
      .all();
    
    if (results.length > 0 && results[0].eng_level) {
      await sendMessage(
        `You've chosen to keep your current English level: *${results[0].eng_level}*.\n\n` +
        "What would you like to do next?",
        [[{ text: "Free Audio Lesson", callback_data: "lesson:free" }]]
      );
    } else {
      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω
      await sendMessage(
        "I couldn't find your current level. Let's take the test to determine it.",
        [[{ text: "Start Test", callback_data: "start_test" }]]
      );
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
  if (update.callback_query?.data === 'start_test') {
    await ack(update.callback_query.id);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    questions = [];
    answers = [];
    index = 0;
    currentCategoryIndex = 0;
    categoryCompletionStatus = {
      vocabulary: 0,
      grammar: 0,
      reading: 0
    };
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    const startAt = new Date().toISOString();
    await env.USER_DB
      .prepare(
        `INSERT INTO user_profiles (telegram_id, start_test_at)
         VALUES (?, ?)
         ON CONFLICT(telegram_id) DO UPDATE
           SET start_test_at = excluded.start_test_at`
      )
      .bind(parseInt(chatId, 10), startAt)
      .run();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã
    const firstQuestion = await fetchNextQuestion(env, 'vocabulary', 'A1');
    questions.push(firstQuestion);
    
    await kv.put(stateKey, JSON.stringify({ 
      questions, 
      answers, 
      index, 
      currentCategoryIndex,
      categoryCompletionStatus
    }));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask(formatQuestion(firstQuestion, 1, 12), firstQuestion.options);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  if (update.callback_query?.data === 'continue_test') {
    await ack(update.callback_query.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
    const testState = await kv.get(stateKey);
    if (!testState) {
      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
      await sendMessage(
        "Sorry, I couldn't find your previous test session :( Let's start a new test.",
        [[{ text: "Start Test", callback_data: "start_test" }]]
      );
      return;
    }
    
    const state = JSON.parse(testState);
    questions = state.questions || [];
    answers = state.answers || [];
    index = state.index || 0;
    currentCategoryIndex = state.currentCategoryIndex || 0;
    categoryCompletionStatus = state.categoryCompletionStatus || {
      vocabulary: 0,
      grammar: 0,
      reading: 0
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if (questions.length > index) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
      await ask(formatQuestion(questions[index], index + 1, 12), questions[index].options);
      return;
    } else {
      // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
      await sendMessage(
        "Sorry, I couldn't properly restore your test. Let's start a new one.",
        [[{ text: "Start Test", callback_data: "start_test" }]]
      );
      return;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
  if (update.callback_query?.data?.startsWith('next:')) {
    await ack(update.callback_query.id);
    const selectedAnswer = update.callback_query.data.slice(5);
    answers[index] = selectedAnswer;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    const currentQuestion = questions[index];
    const isCorrect = (selectedAnswer === currentQuestion.answer);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categoryCompletionStatus[currentQuestion.category]++;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–π
    const categories = ['vocabulary', 'grammar', 'reading'];
    currentCategoryIndex = (currentCategoryIndex + 1) % 3;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categoryCompletionStatus.vocabulary >= 5 && categories[currentCategoryIndex] === 'vocabulary') {
      currentCategoryIndex = (currentCategoryIndex + 1) % 3;
    }
    if (categoryCompletionStatus.grammar >= 5 && categories[currentCategoryIndex] === 'grammar') {
      currentCategoryIndex = (currentCategoryIndex + 1) % 3;
    }
    if (categoryCompletionStatus.reading >= 2 && categories[currentCategoryIndex] === 'reading') {
      currentCategoryIndex = (currentCategoryIndex + 1) % 3;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    let nextLevel;
    if (index < 3) {
      // –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
      nextLevel = 'A1';
    } else {
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
      const correctRatio = answers.filter((a, i) => a === questions[i].answer).length / answers.length;
      
      if (correctRatio >= 0.8) {
        // –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        const currentLevel = currentQuestion.level;
        if (currentLevel === 'A1') nextLevel = 'A2';
        else if (currentLevel === 'A2') nextLevel = 'B1';
        else if (currentLevel === 'B1') nextLevel = 'B2';
        else if (currentLevel === 'B2') nextLevel = 'C1';
        else nextLevel = 'C1';
      } else if (correctRatio <= 0.4) {
        // –ü—Ä–∏ –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∂–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        const currentLevel = currentQuestion.level;
        if (currentLevel === 'C1') nextLevel = 'B2';
        else if (currentLevel === 'B2') nextLevel = 'B1';
        else if (currentLevel === 'B1') nextLevel = 'A2';
        else nextLevel = 'A1';
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        nextLevel = currentQuestion.level;
      }
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    index++;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await kv.put(stateKey, JSON.stringify({ 
      questions, 
      answers, 
      index, 
      currentCategoryIndex,
      categoryCompletionStatus
    }));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç (12 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –≤—Å–µ –ª–∏–º–∏—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
    const testComplete = index >= 12 || 
                        (categoryCompletionStatus.vocabulary >= 5 && 
                         categoryCompletionStatus.grammar >= 5 && 
                         categoryCompletionStatus.reading >= 2);

    if (!testComplete) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã
      const nextCategory = categories[currentCategoryIndex];
      const nextQuestion = await fetchNextQuestion(env, nextCategory, nextLevel);
      questions.push(nextQuestion);
      
      await kv.put(stateKey, JSON.stringify({ 
        questions, 
        answers, 
        index, 
        currentCategoryIndex,
        categoryCompletionStatus
      }));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      await ask(formatQuestion(nextQuestion, index + 1, 12), nextQuestion.options);
      return;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç: –æ—Ü–µ–Ω–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º eng_level –∏ tested_at
    const { level, report } = evaluateTest(questions, answers);
    const testedAt = new Date().toISOString();
    await env.USER_DB
      .prepare(
        `INSERT INTO user_profiles (telegram_id, eng_level, tested_at)
         VALUES (?, ?, ?)
         ON CONFLICT(telegram_id) DO UPDATE
           SET eng_level = excluded.eng_level,
               tested_at = excluded.tested_at`
      )
      .bind(parseInt(chatId, 10), level, testedAt)
      .run();

    await kv.delete(stateKey);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∞
    const correctCount = answers.filter((answer, i) => answer === questions[i].answer).length;
    const accuracy = Math.round((correctCount / questions.length) * 100);
    
    let resultMessage = `üéì *Test completed!*\n\n` +
                        `Your English level: *${level}*\n` +
                        `Accuracy: ${accuracy}%\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    resultMessage += getLevelDescription(level) + "\n\n";
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    if (report.length > 0) {
      resultMessage += "*Areas for improvement:*\n";
      resultMessage += report;
    } else {
      resultMessage += "üåü *Excellent work!* You answered all questions correctly.";
    }
    
    await sendMessage(
      resultMessage,
      [[{ text: "Free Audio Lesson", callback_data: "lesson:free" }]]
    );
    return;
  }

  // –ó–∞–ø—É—Å–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ-—É—Ä–æ–∫–∞
  if (update.callback_query?.data === 'lesson:free') {
    await ack(update.callback_query.id);
    await sendMessage('Starting free audio lesson‚Ä¶');
    ctx.waitUntil(
      env.LESSON0.fetch('https://dummy.internal/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: chatId, action: 'start_free' })
      })
    );
    return;
  }

  // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
  if (update.message) {
    await sendMessage('Press /start to begin the placement test.');
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞
function formatQuestion(question, current, total) {
  let formattedText = `*Question ${current}/${total}*\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (question.category === 'vocabulary') {
    formattedText += 'üìö *Vocabulary*\n\n';
  } else if (question.category === 'grammar') {
    formattedText += 'üìù *Grammar*\n\n';
  } else if (question.category === 'reading') {
    formattedText += 'üìñ *Reading*\n\n';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
  formattedText += question.question;
  
  return formattedText;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
async function fetchNextQuestion(env, category, level) {
  // –ó–¥–µ—Å—å —Å–ª–µ–¥—É–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ KV, D1 –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  
  // –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ D1
  const query = `
    SELECT * FROM test_questions 
    WHERE category = ? AND level = ? 
    ORDER BY RANDOM() 
    LIMIT 1
  `;
  
  try {
    const { results } = await env.USER_DB
      .prepare(query)
      .bind(category, level)
      .all();
    
    if (results && results.length > 0) {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      return {
        id: results[0].id,
        category: results[0].category,
        level: results[0].level,
        question: results[0].question_text,
        options: JSON.parse(results[0].options),
        answer: results[0].correct_answer
      };
    }
  } catch (error) {
    console.error("Error fetching question:", error);
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  return getFallbackQuestion(category, level);
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
function getFallbackQuestion(category, level) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—è
  const fallbackQuestions = {
    vocabulary: {
      A1: {
        question: "What is the meaning of 'begin'?",
        options: ["End", "Start", "Stop", "Continue"],
        answer: "Start",
        category: "vocabulary",
        level: "A1"
      },
      // –î—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏...
    },
    grammar: {
      A1: {
        question: "Complete the sentence: She ___ a student.",
        options: ["am", "is", "are", "be"],
        answer: "is",
        category: "grammar",
        level: "A1"
      },
      // –î—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏...
    },
    reading: {
      A1: {
        question: "Read and answer:\n\nMy name is John. I am from England. I speak English.\n\nWhere is John from?",
        options: ["America", "England", "France", "Spain"],
        answer: "England",
        category: "reading",
        level: "A1"
      },
      // –î—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏...
    }
  };
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—è
  return fallbackQuestions[category][level] || fallbackQuestions.vocabulary.A1;
}

// –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
function evaluateTest(questions, answers) {
  let correct = 0;
  const incorrectByCategory = {
    vocabulary: [],
    grammar: [],
    reading: []
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  questions.forEach((q, i) => {
    if (answers[i] === q.answer) {
      correct++;
    } else {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (q.category === 'vocabulary') {
        incorrectByCategory.vocabulary.push(q);
      } else if (q.category === 'grammar') {
        incorrectByCategory.grammar.push(q);
      } else if (q.category === 'reading') {
        incorrectByCategory.reading.push(q);
      }
    }
  });

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  const accuracy = questions.length ? (correct / questions.length) : 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
  let level;
  if (accuracy >= 0.9) level = 'C1';
  else if (accuracy >= 0.8) level = 'B2';
  else if (accuracy >= 0.65) level = 'B1';
  else if (accuracy >= 0.45) level = 'A2';
  else level = 'A1';
  
  // –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const correctlyAnsweredLevels = questions
    .filter((q, i) => answers[i] === q.answer)
    .map(q => q.level);
  
  if (correctlyAnsweredLevels.includes('C1') && accuracy >= 0.8) {
    level = 'C1';
  } else if (correctlyAnsweredLevels.includes('B2') && accuracy >= 0.7) {
    level = 'B2';
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
  let report = '';
  
  // –û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º –≤ —Å–ª–æ–≤–∞—Ä–Ω–æ–º –∑–∞–ø–∞—Å–µ
  if (incorrectByCategory.vocabulary.length > 0) {
    report += '‚Ä¢ *Vocabulary*: ';
    if (incorrectByCategory.vocabulary.length === 1) {
      const q = incorrectByCategory.vocabulary[0];
      report += `"${q.question}" - Correct answer: "${q.answer}"\n`;
    } else {
      report += `You missed ${incorrectByCategory.vocabulary.length} vocabulary questions.\n`;
    }
  }
  
  // –û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º –≤ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
  if (incorrectByCategory.grammar.length > 0) {
    report += '‚Ä¢ *Grammar*: ';
    if (incorrectByCategory.grammar.length === 1) {
      const q = incorrectByCategory.grammar[0];
      report += `"${q.question}" - Correct answer: "${q.answer}"\n`;
    } else {
      report += `You missed ${incorrectByCategory.grammar.length} grammar questions.\n`;
    }
  }
  
  // –û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º –≤ —á—Ç–µ–Ω–∏–∏
  if (incorrectByCategory.reading.length > 0) {
    report += '‚Ä¢ *Reading*: ';
    if (incorrectByCategory.reading.length === 1) {
      const q = incorrectByCategory.reading[0];
      report += `"${q.question.split('\n\n')[0]}..." - Correct answer: "${q.answer}"\n`;
    } else {
      report += `You missed ${incorrectByCategory.reading.length} reading questions.\n`;
    }
  }

  return { level, report };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è CEFR
function getLevelDescription(level) {
  const descriptions = {
    'A1': "At A1 level, you can understand and use familiar everyday expressions and very basic phrases. You can introduce yourself and others, and ask and answer questions about personal details.",
    'A2': "At A2 level, you can understand sentences and frequently used expressions related to areas of most immediate relevance. You can communicate in simple and routine tasks requiring a simple and direct exchange of information.",
    'B1': "At B1 level, you can deal with most situations likely to arise while traveling in areas where the language is spoken. You can describe experiences and events, dreams, hopes & ambitions, and briefly give reasons and explanations for opinions and plans.",
    'B2': "At B2 level, you can interact with a degree of fluency and spontaneity that makes regular interaction with native speakers quite possible. You can explain your viewpoint on a topical issue, giving the advantages and disadvantages of various options.",
    'C1': "At C1 level, you can use language flexibly and effectively for social, academic and professional purposes. You can produce clear, well-structured, detailed text on complex subjects, showing controlled use of organizational patterns, connectors and cohesive devices."
  };
  
  return descriptions[level] || "Your English level has been assessed.";
}
