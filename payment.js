// payment-worker.js –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ Tribute
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

export default {
  async fetch(request, env) {
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    if (request.method !== 'POST') {
      return new Response('Method not allowed', { status: 405 });
    }
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let data;
    try {
      data = await request.json();
    } catch (error) {
      return new Response('Invalid JSON', { status: 400 });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const telegramId = data.telegram_id;
    if (!telegramId || isNaN(parseInt(telegramId))) {
      return new Response('Invalid telegram ID', { status: 400 });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    switch (data.action) {
      case 'process_subscription':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Tribute)
        return await processSubscription(telegramId, env);
        
      default:
        return new Response('Invalid action', { status: 400 });
    }
  },
};

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async function processSubscription(telegramId, env) {
  console.log(`Processing subscription for user ${telegramId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { results } = await env.USER_DB
      .prepare('SELECT * FROM user_profiles WHERE telegram_id = ?')
      .bind(parseInt(telegramId, 10))
      .all();
    
    if (!results.length) {
      console.error(`User not found: ${telegramId}`);
      return new Response('User not found', { status: 404 });
    }
    
    const profile = results[0];
    console.log(`Processing subscription for user profile:`, {
      telegramId,
      current_subscription: profile.subscription_expired_at,
      current_next_lesson: profile.next_lesson_access_at
    });
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    const now = new Date();
    const subscribed_at = now.toISOString();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    const expirationDate = new Date(now);
    expirationDate.setDate(expirationDate.getDate() + 7);
    expirationDate.setHours(23, 59, 59, 999);
    const subscription_expired_at = expirationDate.toISOString();
    
    // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–µ–ª–∞–µ–º —É—Ä–æ–∫ —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–Ω—ã–º
    const nextLessonDate = new Date(now);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!profile.subscription_expired_at || new Date(profile.subscription_expired_at) < now) {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - —Å–¥–µ–ª–∞—Ç—å —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å—Ä–∞–∑—É
      nextLessonDate.setTime(now.getTime() - 60000); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    } else {
      // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ - —Å–ª–µ–¥—É–µ–º –æ–±—ã—á–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
      nextLessonDate.setHours(2, 0, 0, 0);
      // –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 2 —É—Ç—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (now.getHours() >= 2) {
        nextLessonDate.setDate(nextLessonDate.getDate() + 1);
      }
    }
    
    const next_lesson_access_at = nextLessonDate.toISOString();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–¥–æ–±–∞–≤–ª—è–µ–º $1 –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é)
    const currentAmount = profile.amount_paid || 0;
    const amount_paid = currentAmount + 1;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Ç–∞–±–ª–∏—Ü—É payment_history
    try {
      await env.USER_DB
        .prepare(`
          INSERT INTO payment_history (
            telegram_id, 
            amount, 
            status, 
            created_at
          ) VALUES (?, ?, ?, ?)
        `)
        .bind(
          parseInt(telegramId, 10),
          1.00, // $1.00
          'completed',
          new Date().toISOString()
        )
        .run();
      
      console.log(`Payment recorded for user ${telegramId}`);
    } catch (paymentError) {
      console.error('Error recording payment:', paymentError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞
    }
    
    // –í–∞–∂–Ω–æ: –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log(`Updating user profile with new subscription data:`, {
      telegramId,
      new_subscription_expired_at: subscription_expired_at,
      new_next_lesson_access_at: next_lesson_access_at
    });
    
    try {
      const updateResult = await env.USER_DB
        .prepare(`
          UPDATE user_profiles 
          SET subscribed_at = ?, 
              subscription_expired_at = ?, 
              next_lesson_access_at = ?, 
              amount_paid = ?
          WHERE telegram_id = ?
        `)
        .bind(
          subscribed_at,
          subscription_expired_at,
          next_lesson_access_at,
          amount_paid,
          parseInt(telegramId, 10)
        )
        .run();
      
      console.log('Profile update result:', updateResult);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      const { results: updatedProfile } = await env.USER_DB
        .prepare('SELECT subscription_expired_at, next_lesson_access_at FROM user_profiles WHERE telegram_id = ?')
        .bind(parseInt(telegramId, 10))
        .all();
      
      if (updatedProfile.length > 0) {
        console.log('Profile after update:', {
          subscription_expired_at: updatedProfile[0].subscription_expired_at,
          next_lesson_access_at: updatedProfile[0].next_lesson_access_at
        });
      }
    } catch (updateError) {
      console.error('Error updating user profile:', updateError);
      throw updateError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
    
    console.log(`Subscription activated for user ${telegramId} until ${subscription_expired_at}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sendSubscriptionConfirmation(telegramId, env);
    
    return new Response(JSON.stringify({
      success: true,
      message: "Subscription activated successfully",
      subscription_expired_at: subscription_expired_at,
      next_lesson_access_at: next_lesson_access_at
    }), {
      headers: { 'Content-Type': 'application/json' }
    });
    
  } catch (error) {
    console.error('Error processing subscription:', error);
    return new Response(JSON.stringify({
      success: false,
      error: "Database error: " + error.message
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram
async function sendSubscriptionConfirmation(chatId, env) {
  const message = "üéâ Your weekly subscription has been activated! You now have access to personalized English lessons for the next 7 days.";
  
  const keyboard = {
    inline_keyboard: [
      [{ text: "Start Lesson Now", callback_data: "lesson:start" }]
    ]
  };
  
  await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      reply_markup: keyboard
    })
  });
}
