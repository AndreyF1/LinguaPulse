"""Lambda —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ê–£–î–ò–û –î–ò–ê–õ–û–ì–û–í - –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º shared –≤ path (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ Lambda)
sys.path.insert(0, '/var/task/shared')
sys.path.insert(0, '/var/task')

from shared.openai_client import get_openai_response
from shared.utils import success_response, error_response, parse_request_body, validate_required_fields


def lambda_handler(event, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Lambda –¥–ª—è –∞—É–¥–∏–æ –¥–∏–∞–ª–æ–≥–æ–≤"""
    print(f"üé§ Audio Dialog Lambda called")
    
    try:
        body = parse_request_body(event)
        
        validation_error = validate_required_fields(body, ['action'])
        if validation_error:
            return error_response(validation_error)
        
        action = body['action']
        
        if action == 'generate_greeting':
            return handle_generate_greeting(body)
        elif action == 'generate_dialog_feedback':
            return handle_generate_feedback(body)
        elif action == 'decrease_lessons_left':
            return handle_decrease_lessons_left(body)
        elif action == 'check_audio_access':
            return handle_check_audio_access(body)
        else:
            return error_response(f'Unknown action: {action}')
            
    except Exception as e:
        print(f"‚ùå Audio Dialog Lambda error: {e}")
        return error_response(f'Internal error: {str(e)}', 500)


def handle_generate_greeting(body):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ –¥–∏–∞–ª–æ–≥–∞"""
    validation_error = validate_required_fields(body, ['user_id'])
    if validation_error:
        return error_response(validation_error)
    
    user_id = body['user_id']
    user_level = body.get('user_level', 'Intermediate')
    
    print(f"üé§ Generating audio greeting for user {user_id}, level: {user_level}")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    greeting_prompt = f"""You are an English conversation tutor. Generate a friendly greeting to start an audio conversation practice session with topic suggestions.

User's English level: {user_level}

Requirements:
- Start with a warm, encouraging greeting
- Adapt language complexity to the user's level
- Offer 3-4 conversation topic suggestions (like: travel, hobbies, daily routine, food, etc.)
- Ask the user to choose a topic or suggest their own
- Keep it under 80 words total
- Be enthusiastic and supportive

Example structure: "Hello! I'm excited to practice English with you today! Let's have a great conversation. I can suggest a few topics: [topic 1], [topic 2], [topic 3], or [topic 4]. Which one sounds interesting to you, or would you prefer to talk about something else?"

Generate ONLY the greeting text with topic suggestions, nothing else."""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç OpenAI
    result = get_openai_response("Generate audio greeting", greeting_prompt)
    
    if result['success']:
        print(f"‚úÖ Audio greeting generated for user {user_id}")
        return success_response({
            'reply': result['reply']
        })
    else:
        print(f"‚ùå Audio greeting failed: {result['error']}")
        return error_response(f"Greeting generation error: {result['error']}")


def handle_generate_feedback(body):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±—ç–∫–∞ –¥–ª—è –∞—É–¥–∏–æ –¥–∏–∞–ª–æ–≥–∞"""
    validation_error = validate_required_fields(body, ['user_id'])
    if validation_error:
        return error_response(validation_error)
    
    user_id = body['user_id']
    user_lang = body.get('user_lang', 'ru')
    
    print(f"üìä Generating audio dialog feedback for user {user_id}")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞
    if user_lang == 'en':
        feedback_prompt = """Generate a brief final feedback for an AUDIO-BASED English conversation practice session. Write in English.

IMPORTANT: This was an AUDIO conversation - focus on speaking, pronunciation, and verbal communication skills.

Structure:
üé§ Great work!

Thank you for an interesting audio dialogue! [brief praise]

üó£Ô∏è Main observations:
- [1-2 most critical observations about SPEAKING/PRONUNCIATION/FLUENCY, if any, or positive observations]

üìä Your results:
- Speech: [score]/100
- Vocabulary: [score]/100  
- Grammar: [score]/100

üí° [Encouraging closing message about SPOKEN English skills]

Keep it concise (max 150 words) and encouraging. Give realistic scores 70-95. Focus only on audio-based skills."""
    else:
        feedback_prompt = """Generate a brief final feedback for an AUDIO-BASED English conversation practice session. Write in Russian.

IMPORTANT: This was an AUDIO conversation - focus on speaking, pronunciation, and verbal communication skills.

Structure:
üé§ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∞—É–¥–∏–æ-–¥–∏–∞–ª–æ–≥! [brief praise]

üó£Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
- [1-2 most critical observations about SPEAKING/PRONUNCIATION/FLUENCY, if any, or positive observations]

üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –†–µ—á—å: [score]/100
- –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å: [score]/100  
- –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: [score]/100

üí° [Encouraging closing message about SPOKEN English skills]

Keep it concise (max 150 words) and encouraging. Give realistic scores 70-95. Focus only on audio-based skills."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–¥–±—ç–∫ –æ—Ç OpenAI
    result = get_openai_response("Generate feedback for completed audio dialog", feedback_prompt)
    
    if result['success']:
        print(f"‚úÖ Audio dialog feedback generated for user {user_id}")
        return success_response({
            'feedback': result['reply']
        })
    else:
        print(f"‚ùå Audio dialog feedback failed: {result['error']}")
        return error_response(f"Feedback generation error: {result['error']}")


def handle_decrease_lessons_left(body):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ lessons_left –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–¥–∏–æ-—É—Ä–æ–∫–∞"""
    from database import get_supabase_config
    import urllib.request
    import json
    from datetime import datetime, timedelta
    
    validation_error = validate_required_fields(body, ['user_id'])
    if validation_error:
        return error_response(validation_error)
    
    user_id = body['user_id']
    supabase_config = get_supabase_config()
    supabase_url = supabase_config['url']
    supabase_key = supabase_config['key']
    
    try:
        print(f"Decreasing lessons_left for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        url = f"{supabase_url}/rest/v1/users?telegram_id=eq.{user_id}&select=lessons_left,total_lessons_completed,current_streak,last_lesson_date"
        headers = {
            'Authorization': f'Bearer {supabase_key}',
            'apikey': supabase_key
        }
        
        req = urllib.request.Request(url, headers=headers)
        with urllib.request.urlopen(req) as response:
            response_text = response.read().decode('utf-8')
            users = json.loads(response_text)
            
            if users:
                user_data = users[0]
                current_lessons = user_data.get('lessons_left', 0)
                total_completed = user_data.get('total_lessons_completed', 0)
                current_streak = user_data.get('current_streak', 0)
                last_lesson_date = user_data.get('last_lesson_date')
                
                new_lessons = max(0, current_lessons - 1)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0
                new_total = total_completed + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                
                # –û–±–Ω–æ–≤–ª—è–µ–º streak –∏ last_lesson_date
                today = datetime.now().date()
                should_update_streak = True
                
                if last_lesson_date:
                    try:
                        last_date = datetime.fromisoformat(last_lesson_date).date()
                        # –ï—Å–ª–∏ —É–∂–µ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
                        if last_date == today:
                            should_update_streak = False
                            print(f"User {user_id} already practiced today, not updating streak")
                        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –≤—á–µ—Ä–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
                        elif last_date == today - timedelta(days=1):
                            current_streak += 1
                            print(f"User {user_id} practiced yesterday, increasing streak to {current_streak}")
                        # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–Ω–∏, streak = 1
                        elif last_date < today - timedelta(days=1):
                            current_streak = 1
                            print(f"User {user_id} missed days, resetting streak to 1")
                    except Exception as e:
                        print(f"Error parsing last_lesson_date: {e}")
                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak = 1
                        current_streak = 1
                else:
                    # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è
                    current_streak = 1
                    print(f"User {user_id} first time practicing, setting streak to 1")
                
                print(f"User {user_id}: lessons_left {current_lessons} -> {new_lessons}, total_completed {total_completed} -> {new_total}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    'lessons_left': new_lessons,
                    'total_lessons_completed': new_total
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if should_update_streak:
                    update_data['current_streak'] = current_streak
                    update_data['last_lesson_date'] = today.isoformat()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                update_url = f"{supabase_url}/rest/v1/users?telegram_id=eq.{user_id}"
                update_data_json = json.dumps(update_data).encode('utf-8')
                
                update_headers = {
                    'Authorization': f'Bearer {supabase_key}',
                    'apikey': supabase_key,
                    'Content-Type': 'application/json'
                }
                
                update_req = urllib.request.Request(update_url, data=update_data_json, headers=update_headers, method='PATCH')
                urllib.request.urlopen(update_req)
                
                print(f"Successfully updated lessons for user {user_id}: lessons_left {current_lessons} -> {new_lessons}, total_completed {total_completed} -> {new_total}")
                if should_update_streak:
                    print(f"Also updated streak: {current_streak}, last_lesson_date: {today}")
                
                return success_response({
                    'lessons_left': new_lessons,
                    'total_lessons_completed': new_total,
                    'decreased_by': 1,
                    'streak_updated': should_update_streak,
                    'new_streak': current_streak
                })
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return error_response('User not found')
        
    except Exception as e:
        print(f"Error decreasing lessons_left: {e}")
        return error_response(f'Error decreasing lessons: {str(e)}')


def handle_check_audio_access(body):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ-—É—Ä–æ–∫–∞–º"""
    from database import get_supabase_config
    from datetime import datetime, timezone
    import urllib.request
    import json
    
    validation_error = validate_required_fields(body, ['user_id'])
    if validation_error:
        return error_response(validation_error)
    
    user_id = body['user_id']
    supabase_config = get_supabase_config()
    supabase_url = supabase_config['url']
    supabase_key = supabase_config['key']
    
    try:
        print(f"Checking audio access for user {user_id}")
        print(f"Supabase URL: {supabase_url}")
        print(f"Supabase Key: {supabase_key[:10]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        url = f"{supabase_url}/rest/v1/users?telegram_id=eq.{user_id}"
        print(f"Request URL: {url}")
        
        headers = {
            'Authorization': f'Bearer {supabase_key}',
            'apikey': supabase_key,
            'Content-Type': 'application/json'
        }
        
        req = urllib.request.Request(url, headers=headers)
        with urllib.request.urlopen(req) as response:
            response_text = response.read().decode('utf-8')
            print(f"Supabase response: {response_text}")
            users = json.loads(response_text) if response_text else []
            
            if not users:
                print(f"User {user_id} not found in database")
                return error_response('User not found')
            
            user = users[0]
            lessons_left = user.get('lessons_left', 0)
            package_expires_at = user.get('package_expires_at')
            interface_language = user.get('interface_language', 'ru')
            
            print(f"User {user_id}: lessons_left={lessons_left}, package_expires_at={package_expires_at}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
            now = datetime.now(timezone.utc)
            has_lessons = lessons_left > 0
            has_active_subscription = False
            
            if package_expires_at:
                try:
                    expires_date = datetime.fromisoformat(package_expires_at.replace('Z', '+00:00'))
                    has_active_subscription = expires_date > now
                    print(f"Subscription check: {expires_date} > {now} = {has_active_subscription}")
                except Exception as e:
                    print(f"Error parsing package_expires_at: {e}")
                    has_active_subscription = False
            
            # –î–æ—Å—Ç—É–ø –µ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–∫–∏ –ò –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            has_access = has_lessons and has_active_subscription
            
            print(f"Access result: has_lessons={has_lessons}, has_active_subscription={has_active_subscription}, has_access={has_access}")
            
            return success_response({
                'has_access': has_access,
                'lessons_left': lessons_left,
                'package_expires_at': package_expires_at,
                'has_active_subscription': has_active_subscription,
                'interface_language': interface_language
            })
            
    except urllib.error.HTTPError as e:
        print(f"HTTP Error checking audio access: {e.code} - {e.reason}")
        error_body = e.read().decode('utf-8') if e.fp else 'No error body'
        print(f"Error body: {error_body}")
        return error_response(f'Database error: {e.code} - {e.reason}')
    except Exception as e:
        print(f"Error checking audio access: {e}")
        return error_response(f'Error checking access: {str(e)}')
