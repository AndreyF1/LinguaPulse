"""Lambda —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ê–£–î–ò–û –î–ò–ê–õ–û–ì–û–í - –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'shared'))

from openai_client import get_openai_response
from utils import success_response, error_response, parse_request_body, validate_required_fields


def lambda_handler(event, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Lambda –¥–ª—è –∞—É–¥–∏–æ –¥–∏–∞–ª–æ–≥–æ–≤"""
    print(f"üé§ Audio Dialog Lambda called")
    
    try:
        body = parse_request_body(event)
        
        validation_error = validate_required_fields(body, ['action'])
        if validation_error:
            return error_response(validation_error)
        
        action = body['action']
        
        if action == 'generate_greeting':
            return handle_generate_greeting(body)
        elif action == 'generate_feedback':
            return handle_generate_feedback(body)
        else:
            return error_response(f'Unknown action: {action}')
            
    except Exception as e:
        print(f"‚ùå Audio Dialog Lambda error: {e}")
        return error_response(f'Internal error: {str(e)}', 500)


def handle_generate_greeting(body):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ –¥–∏–∞–ª–æ–≥–∞"""
    validation_error = validate_required_fields(body, ['user_id'])
    if validation_error:
        return error_response(validation_error)
    
    user_id = body['user_id']
    user_level = body.get('user_level', 'Intermediate')
    
    print(f"üé§ Generating audio greeting for user {user_id}, level: {user_level}")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    greeting_prompt = f"""You are an English conversation tutor. Generate a friendly greeting to start an audio conversation practice session with topic suggestions.

User's English level: {user_level}

Requirements:
- Start with a warm, encouraging greeting
- Adapt language complexity to the user's level
- Offer 3-4 conversation topic suggestions (like: travel, hobbies, daily routine, food, etc.)
- Ask the user to choose a topic or suggest their own
- Keep it under 80 words total
- Be enthusiastic and supportive

Example structure: "Hello! I'm excited to practice English with you today! Let's have a great conversation. I can suggest a few topics: [topic 1], [topic 2], [topic 3], or [topic 4]. Which one sounds interesting to you, or would you prefer to talk about something else?"

Generate ONLY the greeting text with topic suggestions, nothing else."""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç OpenAI
    result = get_openai_response("Generate audio greeting", greeting_prompt)
    
    if result['success']:
        print(f"‚úÖ Audio greeting generated for user {user_id}")
        return success_response({
            'reply': result['reply']
        })
    else:
        print(f"‚ùå Audio greeting failed: {result['error']}")
        return error_response(f"Greeting generation error: {result['error']}")


def handle_generate_feedback(body):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±—ç–∫–∞ –¥–ª—è –∞—É–¥–∏–æ –¥–∏–∞–ª–æ–≥–∞"""
    validation_error = validate_required_fields(body, ['user_id'])
    if validation_error:
        return error_response(validation_error)
    
    user_id = body['user_id']
    user_lang = body.get('user_lang', 'ru')
    
    print(f"üìä Generating audio dialog feedback for user {user_id}")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞
    if user_lang == 'en':
        feedback_prompt = """Generate a brief final feedback for an AUDIO-BASED English conversation practice session. Write in English.

IMPORTANT: This was an AUDIO conversation - focus on speaking, pronunciation, and verbal communication skills.

Structure:
üé§ Great work!

Thank you for an interesting audio dialogue! [brief praise]

üó£Ô∏è Main observations:
- [1-2 most critical observations about SPEAKING/PRONUNCIATION/FLUENCY, if any, or positive observations]

üìä Your results:
- Speech: [score]/100
- Vocabulary: [score]/100  
- Grammar: [score]/100

üí° [Encouraging closing message about SPOKEN English skills]

Keep it concise (max 150 words) and encouraging. Give realistic scores 70-95. Focus only on audio-based skills."""
    else:
        feedback_prompt = """Generate a brief final feedback for an AUDIO-BASED English conversation practice session. Write in Russian.

IMPORTANT: This was an AUDIO conversation - focus on speaking, pronunciation, and verbal communication skills.

Structure:
üé§ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∞—É–¥–∏–æ-–¥–∏–∞–ª–æ–≥! [brief praise]

üó£Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
- [1-2 most critical observations about SPEAKING/PRONUNCIATION/FLUENCY, if any, or positive observations]

üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –†–µ—á—å: [score]/100
- –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å: [score]/100  
- –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: [score]/100

üí° [Encouraging closing message about SPOKEN English skills]

Keep it concise (max 150 words) and encouraging. Give realistic scores 70-95. Focus only on audio-based skills."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–¥–±—ç–∫ –æ—Ç OpenAI
    result = get_openai_response("Generate feedback for completed audio dialog", feedback_prompt)
    
    if result['success']:
        print(f"‚úÖ Audio dialog feedback generated for user {user_id}")
        return success_response({
            'feedback': result['reply']
        })
    else:
        print(f"‚ùå Audio dialog feedback failed: {result['error']}")
        return error_response(f"Feedback generation error: {result['error']}")
