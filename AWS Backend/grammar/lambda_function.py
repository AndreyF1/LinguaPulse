"""Lambda —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ì–†–ê–ú–ú–ê–¢–ò–ö–ò - –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'shared'))

from openai_client import get_openai_response
from database import log_text_usage, get_supabase_config
from utils import success_response, error_response, parse_request_body, validate_required_fields


def lambda_handler(event, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Lambda –¥–ª—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
    print(f"üìù Grammar Lambda called")
    
    try:
        body = parse_request_body(event)
        
        validation_error = validate_required_fields(body, ['action'])
        if validation_error:
            return error_response(validation_error)
        
        action = body['action']
        
        if action == 'check_grammar':
            return handle_grammar_check(body)
        else:
            return error_response(f'Unknown action: {action}')
            
    except Exception as e:
        print(f"‚ùå Grammar Lambda error: {e}")
        return error_response(f'Internal error: {str(e)}', 500)


def handle_grammar_check(body):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
    validation_error = validate_required_fields(body, ['text', 'user_id'])
    if validation_error:
        return error_response(validation_error)
    
    text = body['text']
    user_id = body['user_id']
    
    print(f"üìù Checking grammar for user {user_id}: {text[:50]}...")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
    system_prompt = """You are an English grammar tutor. Analyze the user's text and provide helpful corrections.

CRITICAL LANGUAGE RULE: ALWAYS answer in the SAME language the user used for their question.

Your response should:
1. Point out any grammar mistakes
2. Explain the corrections clearly
3. Provide the corrected version
4. Use ||spoiler|| tags for answers when appropriate

Be encouraging and educational in your feedback."""
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
    result = get_openai_response(text, system_prompt)
    
    if result['success']:
        print(f"‚úÖ Grammar check successful for user {user_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        supabase_config = get_supabase_config()
        if supabase_config['url'] and supabase_config['key']:
            log_text_usage(user_id, supabase_config['url'], supabase_config['key'])
        
        return success_response({
            'reply': result['reply']
        })
    else:
        print(f"‚ùå Grammar check failed: {result['error']}")
        return error_response(f"Grammar check error: {result['error']}")
