// payment-worker.js
// Handles subscription payment and updates user profile

export default {
  async fetch(request, env) {
    // Only accept POST requests from telegram-webhook
    if (request.method !== 'POST') {
      return new Response('Method not allowed', { status: 405 });
    }
    
    // Parse the request body
    let data;
    try {
      data = await request.json();
    } catch (error) {
      return new Response('Invalid JSON', { status: 400 });
    }
    
    // Extract telegram ID from the request
    const telegramId = data.telegram_id;
    if (!telegramId || isNaN(parseInt(telegramId))) {
      return new Response('Invalid telegram ID', { status: 400 });
    }
    
    // Validate the action
    if (data.action !== 'process_subscription') {
      return new Response('Invalid action', { status: 400 });
    }
    
    // For now, we'll simulate a successful payment
    // In the future, this would connect to a payment processor
    
    // Get the current user profile
    const { results } = await env.USER_DB
      .prepare('SELECT * FROM user_profiles WHERE telegram_id = ?')
      .bind(parseInt(telegramId, 10))
      .all();
    
    if (!results.length) {
      return new Response('User not found', { status: 404 });
    }
    
    const profile = results[0];
    
    // Calculate subscription dates
    const now = new Date();
    const subscribed_at = now.toISOString();
    
    // Set expiration date to 7 days from now (end of that day)
    const expirationDate = new Date(now);
    expirationDate.setDate(expirationDate.getDate() + 7);
    expirationDate.setHours(23, 59, 59, 999);
    const subscription_expired_at = expirationDate.toISOString();
    
    // For new subscriptions, make the lesson immediately available
const nextLessonDate = new Date(now);
// Check if this is the user's first subscription
if (!profile.subscription_expired_at || new Date(profile.subscription_expired_at) < now) {
  // First time subscriber or subscription was expired - make lesson available immediately
  nextLessonDate.setTime(now.getTime() - 60000); // Set to 1 minute ago to ensure it's available
} else {
  // Renewal - follow the normal schedule
  nextLessonDate.setHours(2, 0, 0, 0);
  // If it's already past 2 AM, set to tomorrow
  if (now.getHours() >= 2) {
    nextLessonDate.setDate(nextLessonDate.getDate() + 1);
  }
}
    
    const next_lesson_access_at = nextLessonDate.toISOString();
    
    // Calculate new amount paid (add $1 to current value)
    const currentAmount = profile.amount_paid || 0;
    const amount_paid = currentAmount + 1;
    
    try {
      // Update the user profile in the database
      await env.USER_DB
        .prepare(`
          UPDATE user_profiles 
          SET subscribed_at = ?, 
              subscription_expired_at = ?, 
              next_lesson_access_at = ?, 
              amount_paid = ?
          WHERE telegram_id = ?
        `)
        .bind(
          subscribed_at,
          subscription_expired_at,
          next_lesson_access_at,
          amount_paid,
          parseInt(telegramId, 10)
        )
        .run();
      
      // Send confirmation message to the user
      await sendSubscriptionConfirmation(telegramId, env);
      
      return new Response(JSON.stringify({
        success: true,
        message: "Subscription activated successfully",
        subscription_expired_at: subscription_expired_at,
        next_lesson_access_at: next_lesson_access_at
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
      
    } catch (error) {
      console.error('Error processing subscription:', error);
      return new Response(JSON.stringify({
        success: false,
        error: "Database error"
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  },
};

// Send confirmation message via Telegram
async function sendSubscriptionConfirmation(chatId, env) {
  const message = "Your weekly subscription has been activated! You now have access to all lessons for the next 7 days.";
  
  const keyboard = {
    inline_keyboard: [
      [{ text: "Start Lesson", callback_data: "lesson:start" }]
    ]
  };
  
  await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      reply_markup: keyboard
    })
  });
}
