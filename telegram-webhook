// telegram-webhook/worker.js
// Receives every Telegram update on /tg and routes it to TEST or LESSON0

export default {
  async fetch(request, env) {
    const { pathname } = new URL(request.url);
    if (pathname !== '/tg') return new Response('Not found', { status: 404 });

    // 0. parse safely
    let update = {};
    try { update = await request.json(); } catch { /* ignore parse errors */ }

    const chatId = update.message?.chat?.id
                || update.callback_query?.message?.chat?.id;
    if (!chatId) return new Response('OK');

    // 1. read current lesson flag
    const flagKey   = `lesson:${chatId}`;
    const lessonFlg = (await env.USER_PROFILE.get(flagKey)) || 'idle';

    // 2. handle “Free audio lesson” button
    if (update.callback_query?.data === 'lesson:free') {
      // send the “Starting…” text back immediately
      await sendMessageViaTelegram(chatId,
        'Starting free audio lesson…', env);

      // mark lesson in progress
      await env.USER_PROFILE.put(flagKey, 'in_progress');

      // forward the start payload to lesson0-bot
      return forward(env.LESSON0, {
        user_id: chatId,
        action : 'start_free'
      });
    }

    // 3. proxy user voice while lesson is in progress
    if (lessonFlg === 'in_progress' && update.message?.voice) {
      return forward(env.LESSON0, update);
    }

    // 4. receive end-of-lesson notification (if you choose to send it)
    if (update.lesson_done) {
      await env.USER_PROFILE.put(flagKey, 'finished', { expirationTtl: 86400 });
      return new Response('OK');
    }

    // 5. everything else goes to test-bot
    return forward(env.TEST, update);
  }
};

/* ──── helper: send a text via Telegram Bot API ──── */
async function sendMessageViaTelegram(chatId, text, env) {
  await fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/sendMessage`, {
    method : 'POST',
    headers: { 'Content-Type': 'application/json' },
    body   : JSON.stringify({ chat_id: chatId, text })
  });
}

/* ──── helper: proxy payload to another Worker ──── */
function forward(service, payload) {
  return service.fetch('https://internal/', {
    method : 'POST',
    headers: { 'Content-Type': 'application/json' },
    body   : JSON.stringify(payload)
  });
}
