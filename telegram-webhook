// telegram-webhook/worker.js
// Receives every Telegram update on /tg and routes it to TEST or LESSON0

export default {
  async fetch(request, env) {
    try {
      const { pathname } = new URL(request.url);
      if (pathname !== '/tg') return new Response('Not found', { status: 404 });

      // 0. parse safely
      let update = {};
      try { 
        update = await request.json(); 
        console.log(`Received update: ${JSON.stringify(update).substring(0, 200)}...`);
      } catch (e) { 
        console.error("JSON parse error:", e);
        return new Response('Bad request', { status: 200 }); // Return 200 to Telegram even for bad requests
      }

      const chatId = update.message?.chat?.id
                  || update.callback_query?.message?.chat?.id;
      if (!chatId) return new Response('OK');

      // Handle /help command directly in webhook
      if (update.message?.text === '/help') {
        await sendMessageViaTelegram(chatId, 
          'Available commands:\n' +
          '/start - Begin the language placement test or see your profile\n' +
          '/profile - View your language level and progress\n' +
          '/lesson - Access your lessons and subscription status\n' +
          '/talk - Start today\'s lesson (for subscribers)\n' +
          '/help - Show this help message\n\n' +
          'After completing the test, you can:\n' +
          '• Start a free audio lesson by clicking the "Free audio lesson" button\n' +
          '• Send voice messages during the lesson to practice your speaking\n' +
          '• The lesson ends automatically when completed', env);
        return new Response('OK');
      }

      // Handle /talk command - route to main-lesson
      if (update.message?.text === '/talk') {
        // Forward directly to main-lesson worker
        console.log("Forwarding /talk command to MAIN_LESSON");
        return forward(env.MAIN_LESSON, update);
      }

      // Handle /profile command - show user-friendly profile data
      if (update.message?.text === '/profile') {
        const { results } = await env.USER_DB
          .prepare('SELECT * FROM user_profiles WHERE telegram_id = ?')
          .bind(parseInt(chatId, 10))
          .all();
        
        const profile = results[0] || {};
        
        if (!profile.eng_level) {
          await sendMessageViaTelegram(chatId, 
            'You haven\'t taken the placement test yet. Use /start to begin.', env);
        } else {
          // Format human-readable profile info
          const testedAt = profile.tested_at ? new Date(profile.tested_at).toLocaleDateString() : 'N/A';
          const subscriptionEnd = profile.subscription_expired_at ? new Date(profile.subscription_expired_at).toLocaleDateString() : 'No active subscription';
          const lessonsTotal = profile.number_of_lessons || 0;
          const lessonsStreak = profile.lessons_in_row || 0;
          
          await sendMessageViaTelegram(chatId, 
            `Your language profile:\n\n` +
            `Language level: ${profile.eng_level}\n` +
            `Subscription valid until: ${subscriptionEnd}\n` +
            `Total lessons completed: ${lessonsTotal}\n` +
            `Current lesson streak: ${lessonsStreak}`, env);
        }
        
        return new Response('OK');
      }

      // Handle /lesson command - same as /start for users who completed the test
      if (update.message?.text === '/lesson' || 
        (update.message?.text === '/start' && await hasCompletedTest(chatId, env))) {
        await handleLessonCommand(chatId, env);
        return new Response('OK');
      }
        
      // Modified /start command to check for existing level
      if (update.message?.text === '/start') {
        // This will only run if the user has not completed the test
        // (because the previous condition would have caught it otherwise)
        
        // Continue with original /start flow to generate questions
        const questions = await generateTest(env);
        const answers = [];
        const index = 0;
        
        const stateKey = STATE_PREFIX + chatId;
        await env.TEST_KV.put(stateKey, JSON.stringify({ questions, answers, index }));
        
        const startAt = new Date().toISOString();
        await env.USER_DB
          .prepare(
            `INSERT INTO user_profiles (telegram_id, start_test_at)
             VALUES (?, ?)
             ON CONFLICT(telegram_id) DO UPDATE
               SET start_test_at = excluded.start_test_at`
          )
          .bind(parseInt(chatId, 10), startAt)
          .run();
        
        // Ask first question
        const kb = questions[0].options.map(o => [{
          text: o,
          callback_data: `next:${o}`
        }]);
        
        await sendMessageViaTelegram(chatId, questions[0].question, env, { inline_keyboard: kb });
        return new Response('OK');
      }

      // Handle voice messages with improved routing
      if (update.message?.voice) {
        try {
          console.log(`Received voice message from chat ${chatId}, message ID: ${update.message.message_id}`);
          
          // First check if it's a main lesson session
          const mainSessionKey = `main_session:${chatId}`;
          let mainSession = null;
          
          if (env.CHAT_KV) {
            console.log(`Checking CHAT_KV for ${mainSessionKey}`);
            mainSession = await env.CHAT_KV.get(mainSessionKey);
            
            if (mainSession) {
              console.log(`Found active main-lesson session (${mainSession}), forwarding voice message to MAIN_LESSON`);
              return forward(env.MAIN_LESSON, update);
            }
            
            // If not found in main session, check for lesson0 session directly in CHAT_KV
            const lesson0SessionKey = `session:${chatId}`;
            const lesson0Session = await env.CHAT_KV.get(lesson0SessionKey);
            
            if (lesson0Session) {
              console.log(`Found active lesson0 session (${lesson0Session}), forwarding voice message to LESSON0`);
              return forward(env.LESSON0, update);
            }
          }
          
          // If no active session found, check if user has completed the lesson recently
          // and provide information about next lesson or subscription
          const { results } = await env.USER_DB
            .prepare('SELECT subscription_expired_at, next_lesson_access_at FROM user_profiles WHERE telegram_id = ?')
            .bind(parseInt(chatId, 10))
            .all();
          
          if (results.length > 0) {
            const profile = results[0];
            const now = new Date();
            
            // Check if subscription is active
            const hasActiveSubscription = profile.subscription_expired_at && 
                                        (new Date(profile.subscription_expired_at) > now);
            
            if (hasActiveSubscription) {
              // Check when next lesson is available
              if (profile.next_lesson_access_at) {
                const nextLessonAt = new Date(profile.next_lesson_access_at);
                
                if (nextLessonAt > now) {
                  // Next lesson in the future - tell user when it will be available
                  const timeUntil = formatTimeUntil(nextLessonAt);
                  await sendMessageViaTelegram(chatId,
                    `Your next lesson will be available in ${timeUntil}. I look forward to our next conversation!`,
                    env);
                  return new Response('OK');
                } else {
                  // Lesson is available now - suggest starting it
                  await sendMessageViaTelegram(chatId,
                    "Your next lesson is available now! Would you like to start?",
                    env,
                    { inline_keyboard: [[{ text: "Start Lesson", callback_data: "lesson:start" }]] });
                  return new Response('OK');
                }
              }
            } else {
              // No active subscription - offer to subscribe
              await sendMessageViaTelegram(chatId,
                "Your subscription has expired. Subscribe again to continue with daily lessons!",
                env,
                { inline_keyboard: [[{ text: "Subscribe for $1/week", callback_data: "sub:weekly" }]] });
              return new Response('OK');
            }
          }
          
          // Generic fallback if no user profile found or other conditions not met
          await sendMessageViaTelegram(chatId, 
            "You don't have an active lesson. Please use /start to begin the placement test or /talk to start a lesson if you've already completed it.", 
            env);
          return new Response('OK');
        } catch (error) {
          console.error(`Voice message handling error: ${error.message}`);
          console.error(error.stack); // Log the full stack trace
          return new Response('OK');  // Always return OK to Telegram
        }
      }

      // Handle regular text messages outside of sessions
      if (update.message?.text && !update.message.text.startsWith('/')) {
        // Check if user has an active session
        let activeSession = false;
        
        if (env.CHAT_KV) {
          const mainSession = await env.CHAT_KV.get(`main_session:${chatId}`);
          const lesson0Session = await env.CHAT_KV.get(`session:${chatId}`);
          
          if (mainSession || lesson0Session) {
            activeSession = true;
          }
        }
        
        // If no active session, provide info about next lesson or subscription
        if (!activeSession) {
          const { results } = await env.USER_DB
            .prepare('SELECT subscription_expired_at, next_lesson_access_at, eng_level FROM user_profiles WHERE telegram_id = ?')
            .bind(parseInt(chatId, 10))
            .all();
          
          // If user hasn't taken the test yet
          if (!results.length || !results[0].eng_level) {
            await sendMessageViaTelegram(chatId, 
              "Please use /start to begin the placement test so I can determine your English level.", 
              env);
            return new Response('OK');
          }
          
          const profile = results[0];
          const now = new Date();
          
          // Check if subscription is active
          const hasActiveSubscription = profile.subscription_expired_at && 
                                       (new Date(profile.subscription_expired_at) > now);
          
          if (hasActiveSubscription) {
            // Check when next lesson is available
            if (profile.next_lesson_access_at) {
              const nextLessonAt = new Date(profile.next_lesson_access_at);
              
              if (nextLessonAt > now) {
                // Next lesson in the future - tell user when it will be available
                const timeUntil = formatTimeUntil(nextLessonAt);
                await sendMessageViaTelegram(chatId,
                  `Your next lesson will be available in ${timeUntil}. You can use /profile to see your progress.`,
                  env);
                return new Response('OK');
              } else {
                // Lesson is available now - suggest starting it
                await sendMessageViaTelegram(chatId,
                  "Your next lesson is available now! Would you like to start?",
                  env,
                  { inline_keyboard: [[{ text: "Start Lesson", callback_data: "lesson:start" }]] });
                return new Response('OK');
              }
            }
          } else {
            // No active subscription - offer to subscribe
            await sendMessageViaTelegram(chatId,
              "You need an active subscription to access lessons. Subscribe now to continue improving your English!",
              env,
              { inline_keyboard: [[{ text: "Subscribe for $1/week", callback_data: "sub:weekly" }]] });
            return new Response('OK');
          }
        }
      }

      // 2. handle lesson buttons
      if (update.callback_query?.data === 'lesson:free' || 
          update.callback_query?.data === 'lesson:start') {
        // Acknowledge the callback query
        await callTelegram('answerCallbackQuery', {
          callback_query_id: update.callback_query.id
        }, env);
        
        // If this is the free lesson, handle it as before
        if (update.callback_query?.data === 'lesson:free') {
          // send the "Starting…" text back immediately
          await sendMessageViaTelegram(chatId,
            'Starting audio lesson…', env);

          // mark lesson in progress
          await env.USER_PROFILE.put(`lesson:${chatId}`, 'in_progress');

          // forward the start payload to lesson0-bot
          console.log("Forwarding lesson:free action to LESSON0");
          return forward(env.LESSON0, {
            user_id: chatId,
            action : 'start_free'
          });
        } 
        // If this is the main lesson (from subscription)
        else if (update.callback_query?.data === 'lesson:start') {
          // Forward to the main-lesson worker with appropriate action
          console.log("Forwarding lesson:start action to MAIN_LESSON");
          return forward(env.MAIN_LESSON, {
            user_id: chatId,
            action : 'start_lesson'
          });
        }
      }
      
      // 2.1 handle subscription button
      if (update.callback_query?.data === 'sub:weekly') {
        // Acknowledge the callback query to remove the loading indicator
        await callTelegram('answerCallbackQuery', {
          callback_query_id: update.callback_query.id
        }, env);
        
        // Check current subscription status
        const { results } = await env.USER_DB
          .prepare('SELECT subscription_expired_at, next_lesson_access_at FROM user_profiles WHERE telegram_id = ?')
          .bind(parseInt(chatId, 10))
          .all();
        
        if (!results.length) {
          await sendMessageViaTelegram(chatId, 
            'You need to take the placement test first. Use /start to begin.', env);
          return new Response('OK');
        }
        
        const profile = results[0];
        const now = new Date();
        
        // Check if user has an active subscription
        if (profile.subscription_expired_at) {
          const subExpiredAt = new Date(profile.subscription_expired_at);
          
          // If subscription is still active
          if (subExpiredAt.getTime() > now.getTime()) {
            // Format the expiration date
            const expiryDate = subExpiredAt.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            
            // Check if next lesson is available
            if (profile.next_lesson_access_at) {
              const nextLessonAt = new Date(profile.next_lesson_access_at);
              
              if (nextLessonAt.getTime() <= now.getTime()) {
                // Next lesson is already available
                await sendMessageViaTelegram(chatId,
                  `You already have an active subscription until ${expiryDate}. Your next lesson is available now!`, 
                  env, 
                  { inline_keyboard: [[{ text: "Start Lesson", callback_data: "lesson:start" }]] }
                );
              } else {
                // Next lesson will be available later
                const timeUntil = formatTimeUntil(nextLessonAt);
                await sendMessageViaTelegram(chatId,
                  `You already have an active subscription until ${expiryDate}. Your next lesson will be available in ${timeUntil}.`,
                  env
                );
              }
              return new Response('OK');
            } else {
              // Something went wrong - subscription exists but next_lesson_access_at is missing
              await sendMessageViaTelegram(chatId,
                `You already have an active subscription until ${expiryDate}.`,
                env,
                { inline_keyboard: [[{ text: "Start Lesson", callback_data: "lesson:start" }]] }
              );
              return new Response('OK');
            }
          }
        }
        
        // If we get here, user doesn't have an active subscription or it has expired
        // Process the new subscription
        try {
          // Call the payment worker directly using the service binding
          const paymentResponse = await env.PAYMENT.fetch('https://internal/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              telegram_id: chatId,
              action: 'process_subscription'
            })
          });
          
          if (!paymentResponse.ok) {
            throw new Error(`Payment processing failed: ${paymentResponse.status}`);
          }
          
          // The payment worker will handle sending the confirmation message
          // and updating the user's subscription status
          
        } catch (error) {
          console.error('Payment error:', error);
          
          // Send error message to user
          await sendMessageViaTelegram(chatId,
            'Sorry, there was an error processing your subscription. Please try again later.', env);
        }
        
        return new Response('OK');
      }

      // 4. receive end-of-lesson notification (if you choose to send it)
      if (update.lesson_done) {
        await env.USER_PROFILE.put(`lesson:${chatId}`, 'finished', { expirationTtl: 86400 });
        return new Response('OK');
      }

      // 5. everything else goes to test-bot
      console.log("Forwarding to TEST bot as default action");
      return forward(env.TEST, update);
    } catch (error) {
      console.error("Unhandled error in telegram-webhook:", error);
      // Always return 200 OK to Telegram webhook to avoid retries
      return new Response('OK');
    }
  }
};

// KV prefix for transient test state
const STATE_PREFIX = 'state:';

/* ──── helper: send a text via Telegram Bot API ──── */
async function sendMessageViaTelegram(chatId, text, env, keyboard = null) {
  const payload = { chat_id: chatId, text };
  
  if (keyboard) {
    payload.reply_markup = keyboard;
  }
  
  return callTelegram('sendMessage', payload, env);
}

/* ──── helper: call any Telegram API method ──── */
async function callTelegram(method, payload, env) {
  return fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`, {
    method : 'POST',
    headers: { 'Content-Type': 'application/json' },
    body   : JSON.stringify(payload)
  });
}

/* ──── helper: proxy payload to another Worker ──── */
function forward(service, payload) {
  return service.fetch('https://internal/', {
    method : 'POST',
    headers: { 'Content-Type': 'application/json' },
    body   : JSON.stringify(payload)
  });
}

/* ──── helper: check if user has completed test ──── */
async function hasCompletedTest(chatId, env) {
  const { results } = await env.USER_DB
    .prepare('SELECT eng_level FROM user_profiles WHERE telegram_id = ?')
    .bind(parseInt(chatId, 10))
    .all();
  
  return results[0]?.eng_level ? true : false;
}

/* ──── helper: handle lesson command ──── */
async function handleLessonCommand(chatId, env) {
  // Get user profile with all necessary fields
  const { results } = await env.USER_DB
    .prepare('SELECT * FROM user_profiles WHERE telegram_id = ?')
    .bind(parseInt(chatId, 10))
    .all();
  
  if (!results.length) {
    await sendMessageViaTelegram(chatId, 
      'You need to take the placement test first. Use /start to begin.', env);
    return;
  }
  
  const profile = results[0];
  
  // Basic profile info
  const testedAt = profile.tested_at ? new Date(profile.tested_at).toLocaleDateString() : 'N/A';
  const lessonsTotal = profile.number_of_lessons || 0;
  const lessonsStreak = profile.lessons_in_row || 0;
  
  let message = `Your language profile:\n` +
    `Language level: ${profile.eng_level}\n` +
    `Total lessons completed: ${lessonsTotal}\n` +
    `Current lesson streak: ${lessonsStreak}\n\n`;
  
  // Check pass_lesson0_at first
  if (!profile.pass_lesson0_at) {
    // Free lesson not taken yet - show button
    message += 'You haven\'t taken your free introductory lesson yet.';
    await sendMessageViaTelegram(chatId, message, env, {
      inline_keyboard: [[{ text: 'Free audio lesson', callback_data: 'lesson:free' }]]
    });
    return;
  }
  
  // Check subscription status
  const now = new Date();
  const subExpiredAt = profile.subscription_expired_at ? new Date(profile.subscription_expired_at) : null;
  
  if (!subExpiredAt || subExpiredAt.getTime() < now.getTime()) {
    // No active subscription or it's expired - show subscribe button
    message += 'Your subscription has expired or you haven\'t subscribed yet.';
    await sendMessageViaTelegram(chatId, message, env, {
      inline_keyboard: [[{ text: 'Subscribe for $1/week', callback_data: 'sub:weekly' }]]
    });
    return;
  }
  
  // Active subscription - show next lesson access time
  const nextLessonAt = profile.next_lesson_access_at ? new Date(profile.next_lesson_access_at) : null;
  
  if (nextLessonAt && nextLessonAt.getTime() > now.getTime()) {
    // Format the time until next lesson
    const timeUntil = formatTimeUntil(nextLessonAt);
    message += `Your next lesson will be available in ${timeUntil}.`;
    await sendMessageViaTelegram(chatId, message, env);
    return;
  }
  
  // Lesson is available now
  message += 'Your next lesson is available now!';
  await sendMessageViaTelegram(chatId, message, env, {
    inline_keyboard: [[{ text: 'Start lesson', callback_data: 'lesson:start' }]]
  });
}

/* ──── helper: format time until date in human-readable form ──── */
function formatTimeUntil(date) {
  const now = new Date();
  const diffMs = date.getTime() - now.getTime();
  
  if (diffMs <= 0) return 'now';
  
  const diffSec = Math.floor(diffMs / 1000);
  const diffMin = Math.floor(diffSec / 60);
  const diffHr = Math.floor(diffMin / 60);
  const diffDays = Math.floor(diffHr / 24);
  
  if (diffDays > 0) {
    return `${diffDays} day${diffDays > 1 ? 's' : ''}`;
  } else if (diffHr > 0) {
    return `${diffHr} hour${diffHr > 1 ? 's' : ''}`;
  } else if (diffMin > 0) {
    return `${diffMin} minute${diffMin > 1 ? 's' : ''}`;
  } else {
    return `${diffSec} second${diffSec > 1 ? 's' : ''}`;
  }
}

// GPT-based question generation
async function generateTest(env) {
  const res = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.OPENAI_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      temperature: 0.7,
      max_tokens: 800,
      messages: [
        { role: 'system', content: env.SYSTEM_PROMPT },
        { role: 'user',   content: env.USER_PROMPT }
      ]
    })
  });

  const data = await res.json();
  let txt = data.choices?.[0]?.message?.content?.trim() || '';
  txt = txt.replace(/^```(?:json)?/, '').replace(/```$/, '').trim();

  let parsed;
  try {
    parsed = JSON.parse(txt);
  } catch (e) {
    console.error('generateTest parse error:', txt, e);
    throw new Error('Failed to parse questions JSON');
  }

  const arr = Array.isArray(parsed)
    ? parsed
    : Array.isArray(parsed.questions) ? parsed.questions : [];
  return arr.slice(0, 10).map(q => ({
    question: q.question,
    options: Array.isArray(q.options) ? q.options.slice(0, 4) : [],
    answer: q.answer
  }));
}
