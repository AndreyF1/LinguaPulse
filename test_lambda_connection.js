#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lambda —Ñ—É–Ω–∫—Ü–∏–∏
 */

const LAMBDA_URL = "https://llcr9578ee.execute-api.us-east-1.amazonaws.com/prod/onboarding";
const LAMBDA_TOKEN = "linguapulse-secret-token-2024";

async function testLambdaConnection() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lambda —Ñ—É–Ω–∫—Ü–∏–∏...");
  console.log("URL:", LAMBDA_URL);
  console.log("");

  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π ping
  console.log("1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ ping...");
  try {
    const response = await fetch(LAMBDA_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${LAMBDA_TOKEN}`
      },
      body: JSON.stringify({
        test: true,
        message: "ping"
      })
    });

    console.log("Status:", response.status);
    console.log("Headers:", Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const result = await response.text();
      console.log("Response:", result);
      console.log("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω!");
    } else {
      console.log("‚ùå Ping failed:", response.status);
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ ping:", error.message);
  }

  console.log("");

  // –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start
  console.log("2Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start...");
  try {
    const response = await fetch(LAMBDA_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${LAMBDA_TOKEN}`
      },
      body: JSON.stringify({
        message: {
          text: "/start",
          chat: { id: 123456789 },
          from: { id: 123456789, username: "test_user" }
        }
      })
    });

    console.log("Status:", response.status);
    
    if (response.ok) {
      const result = await response.text();
      console.log("Response:", result);
      console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!");
    } else {
      console.log("‚ùå –ö–æ–º–∞–Ω–¥–∞ /start failed:", response.status);
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start:", error.message);
  }

  console.log("");
  console.log("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
  console.log("–ï—Å–ª–∏ –æ–±–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, Lambda —Ñ—É–Ω–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
  console.log("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Cloudflare Worker —Å —ç—Ç–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.");
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testLambdaConnection().catch(console.error);
