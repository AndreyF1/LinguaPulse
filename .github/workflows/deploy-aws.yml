name: Deploy AWS Lambda

on:
  push:
    paths:
      - 'AWS Backend/**'
      - '.github/workflows/deploy-aws.yml'
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Verify AWS connection
        run: |
          echo "üîê Verifying AWS credentials..."
          aws sts get-caller-identity --no-cli-pager
          echo "üîç Checking Lambda function exists..."
          aws lambda get-function --function-name linguapulse-onboarding --query 'Configuration.FunctionName' --output text --no-cli-pager
          echo "üîë Testing Lambda permissions..."
          aws lambda get-function-configuration --function-name linguapulse-onboarding --query 'Runtime' --output text --no-cli-pager
          echo "üìã Current Lambda configuration:"
          aws lambda get-function-configuration --function-name linguapulse-onboarding --no-cli-pager | head -10
      
      - name: Deploy Lambda functions
        run: |
          echo "üîç Starting Lambda deployment..."
          cd "AWS Backend"
          echo "üìÅ Current directory: $(pwd)"
          echo "üìã Files in directory:"
          ls -la
          
          # Create Lambda functions if they don't exist
          echo "üèóÔ∏è  Creating Lambda functions if needed..."
          
          # Function to create Lambda if it doesn't exist
          create_lambda_if_not_exists() {
            local function_name=$1
            local handler=$2
            local zip_file=$3
            
            if aws lambda get-function --function-name $function_name --no-cli-pager >/dev/null 2>&1; then
              echo "‚úÖ Lambda function $function_name already exists"
            else
              echo "üÜï Creating Lambda function $function_name..."
              aws lambda create-function \
                --function-name $function_name \
                --runtime python3.9 \
                --role arn:aws:iam::225989365600:role/service-role/lingua-pulse-api-role-l1bt75fl \
                --handler $handler \
                --zip-file fileb://$zip_file \
                --timeout 30 \
                --memory-size 256 \
                --no-cli-pager
              
              # Set environment variables with correct secret names
              echo "‚úÖ Setting environment variables..."
              aws lambda update-function-configuration \
                --function-name $function_name \
                --environment Variables='{SUPABASE_URL="${{ secrets.SUPABASE_URL }}",SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_KEY }}",OPENAI_API_KEY="${{ secrets.OPENAI_KEY }}",YOOMONEY_WEBHOOK_SECRET="${{ secrets.YOOMONEY_WEBHOOK_SECRET }}"}' \
                --no-cli-pager
              echo "‚úÖ Lambda function $function_name created"
            fi
          }
          
          # Deploy shared Lambda (main onboarding function)
          echo "üì¶ Creating shared Lambda zip archive..."
          zip -r shared-lambda.zip shared/lambda_function.py shared/database.py shared/openai_client.py shared/utils.py
          echo "‚úÖ Shared zip created, size: $(ls -lh shared-lambda.zip)"
          
          echo "üöÄ Updating shared Lambda function code..."
          if aws lambda update-function-code \
            --function-name linguapulse-onboarding \
            --zip-file fileb://shared-lambda.zip \
            --no-cli-pager 2>&1; then
            echo "‚úÖ Shared Lambda code update initiated"
            aws lambda wait function-updated --function-name linguapulse-onboarding
            echo "‚úÖ Shared Lambda code updated and is now Active"
          else
            echo "‚ùå Failed to update shared Lambda code"
            exit 1
          fi
          
          echo "‚öôÔ∏è  Updating shared Lambda function configuration..."
          if aws lambda update-function-configuration \
            --function-name linguapulse-onboarding \
            --handler shared/lambda_function.lambda_handler \
            --no-cli-pager; then
            echo "‚úÖ Shared Lambda configuration updated"
            aws lambda wait function-updated --function-name linguapulse-onboarding
          else
            echo "‚ùå Failed to update shared Lambda configuration"
            exit 1
          fi
          
          # Deploy translation Lambda
          echo "üì¶ Creating translation Lambda zip archive..."
          zip -r translation-lambda.zip translation/lambda_function.py shared/database.py shared/openai_client.py shared/utils.py
          echo "‚úÖ Translation zip created"
          
          # Create translation Lambda if needed
          create_lambda_if_not_exists "linguapulse-translation" "lambda_function.lambda_handler" "translation-lambda.zip"
          
          echo "üöÄ Updating translation Lambda function code..."
          if aws lambda update-function-code \
            --function-name linguapulse-translation \
            --zip-file fileb://translation-lambda.zip \
            --no-cli-pager 2>&1; then
            echo "‚úÖ Translation Lambda updated"
            aws lambda wait function-updated --function-name linguapulse-translation
          else
            echo "‚ö†Ô∏è  Translation Lambda update failed (function may not exist yet)"
          fi
          
          # Deploy grammar Lambda
          echo "üì¶ Creating grammar Lambda zip archive..."
          zip -r grammar-lambda.zip grammar/lambda_function.py shared/database.py shared/openai_client.py shared/utils.py
          echo "‚úÖ Grammar zip created"
          
          # Create grammar Lambda if needed
          create_lambda_if_not_exists "linguapulse-grammar" "lambda_function.lambda_handler" "grammar-lambda.zip"
          
          echo "üöÄ Updating grammar Lambda function code..."
          if aws lambda update-function-code \
            --function-name linguapulse-grammar \
            --zip-file fileb://grammar-lambda.zip \
            --no-cli-pager 2>&1; then
            echo "‚úÖ Grammar Lambda updated"
            aws lambda wait function-updated --function-name linguapulse-grammar
          else
            echo "‚ö†Ô∏è  Grammar Lambda update failed (function may not exist yet)"
          fi
          
          # Deploy text_dialog Lambda
          echo "üì¶ Creating text_dialog Lambda zip archive..."
          zip -r text-dialog-lambda.zip text_dialog/lambda_function.py shared/database.py shared/openai_client.py shared/utils.py
          echo "‚úÖ Text dialog zip created"
          
          # Create text_dialog Lambda if needed
          create_lambda_if_not_exists "linguapulse-text-dialog" "lambda_function.lambda_handler" "text-dialog-lambda.zip"
          
          echo "üöÄ Updating text_dialog Lambda function code..."
          if aws lambda update-function-code \
            --function-name linguapulse-text-dialog \
            --zip-file fileb://text-dialog-lambda.zip \
            --no-cli-pager 2>&1; then
            echo "‚úÖ Text dialog Lambda updated"
            aws lambda wait function-updated --function-name linguapulse-text-dialog
          else
            echo "‚ö†Ô∏è  Text dialog Lambda update failed (function may not exist yet)"
          fi
          
          # Deploy audio_dialog Lambda
          echo "üì¶ Creating audio_dialog Lambda zip archive..."
          zip -r audio-dialog-lambda.zip audio_dialog/lambda_function.py shared/database.py shared/openai_client.py shared/utils.py
          echo "‚úÖ Audio dialog zip created"
          
          # Create audio_dialog Lambda if needed
          create_lambda_if_not_exists "linguapulse-audio-dialog" "lambda_function.lambda_handler" "audio-dialog-lambda.zip"
          
          echo "üöÄ Updating audio_dialog Lambda function code..."
          if aws lambda update-function-code \
            --function-name linguapulse-audio-dialog \
            --zip-file fileb://audio-dialog-lambda.zip \
            --no-cli-pager 2>&1; then
            echo "‚úÖ Audio dialog Lambda updated"
            aws lambda wait function-updated --function-name linguapulse-audio-dialog
          else
            echo "‚ö†Ô∏è  Audio dialog Lambda update failed (function may not exist yet)"
          fi
          
          # Deploy payments Lambda
          echo "üì¶ Creating payments Lambda zip archive..."
          cd payments
          # Install dependencies
          pip install -r requirements.txt -t .
          # Create zip with all files
          zip -r ../payments-lambda.zip .
          cd ..
          echo "‚úÖ Payments zip created"
          
          # Create payments Lambda if needed
          create_lambda_if_not_exists "linguapulse-payments" "lambda_function.lambda_handler" "payments-lambda.zip"
          
          echo "üöÄ Updating payments Lambda function code..."
          if aws lambda update-function-code \
            --function-name linguapulse-payments \
            --zip-file fileb://payments-lambda.zip \
            --no-cli-pager 2>&1; then
            echo "‚úÖ Payments Lambda updated"
            aws lambda wait function-updated --function-name linguapulse-payments
          else
            echo "‚ö†Ô∏è  Payments Lambda update failed (function may not exist yet)"
          fi
          
          # Set environment variables for payments Lambda specifically
          echo "‚öôÔ∏è  Setting environment variables for payments Lambda..."
          if aws lambda update-function-configuration \
            --function-name linguapulse-payments \
            --environment Variables='{SUPABASE_URL="${{ secrets.SUPABASE_URL }}",SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_KEY }}",YOOMONEY_WEBHOOK_SECRET="${{ secrets.YOOMONEY_WEBHOOK_SECRET }}",BOT_TOKEN="${{ secrets.BOT_TOKEN }}"}' \
            --no-cli-pager; then
            echo "‚úÖ Payments Lambda environment variables updated"
          else
            echo "‚ö†Ô∏è  Failed to update payments Lambda environment variables"
          fi
          
          echo "‚úÖ All Lambda deployments completed!"
