// linguapulse-test-bot worker.js
// Telegram webhook + placement test + D1 (USER_DB) for profile + KV for state (TEST_KV)

function jsonResponse(obj, status = 200) {
  return new Response(JSON.stringify(obj), {
    status,
    headers: { 'Content-Type': 'application/json' }
  });
}

export default {
  async fetch(request, env, ctx) {
    if (request.method === 'POST') {
      const update = await request.json().catch(() => ({}));
      ctx.waitUntil(handleUpdate(update, env, ctx));
      return new Response('OK');
    }
    return new Response('Welcome to LinguaPulseBot', { status: 200 });
  }
};

// KV prefix for transient test state
const STATE_PREFIX = 'state:';

// Main update handler
async function handleUpdate(update, env, ctx) {
  const chatId = update.message?.chat?.id || update.callback_query?.message?.chat?.id;
  if (!chatId) return;

  // Telegram API helpers
  const callT = (method, payload = {}) =>
    fetch(`https://api.telegram.org/bot${env.BOT_TOKEN}/${method}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, ...payload })
    });

  const sendMessage = (text, keyboard) => {
    const opts = { text };
    if (keyboard) opts.reply_markup = { inline_keyboard: keyboard };
    return callT('sendMessage', opts);
  };

  const ack = (callbackId) =>
    callT('answerCallbackQuery', { callback_query_id: callbackId });

  const ask = (text, options) => {
    const kb = options.map(o => [{ text: o, callback_data: `next:${o}` }]);
    return sendMessage(text, kb);
  };

  // KV storage for state
  const kv = env.TEST_KV;
  const stateKey = STATE_PREFIX + chatId;
  const raw = await kv.get(stateKey);
  const allState = raw ? JSON.parse(raw) : {};
  let { questions = [], answers = [], index = 0 } = allState;

  // /profile → read D1
  if (update.message?.text === '/profile') {
    const { results } = await env.USER_DB
      .prepare('SELECT * FROM user_profiles WHERE telegram_id = ?')
      .bind(parseInt(chatId, 10))
      .all();
    const profile = results[0] || {};
    await sendMessage(`Profile data:\n${JSON.stringify(profile, null, 2)}`);
    return;
  }

  // /start → generate questions, record start_test_at, ask first
  if (update.message?.text === '/start' || update.retake_test) {
    questions = await generateTest(env);
    answers = [];
    index = 0;
    await kv.put(stateKey, JSON.stringify({ questions, answers, index }));
    const startAt = new Date().toISOString();
    await env.USER_DB
      .prepare(
        `INSERT INTO user_profiles (telegram_id, start_test_at)
         VALUES (?, ?)
         ON CONFLICT(telegram_id) DO UPDATE
           SET start_test_at = excluded.start_test_at`
      )
      .bind(parseInt(chatId, 10), startAt)
      .run();
    await ask(questions[0].question, questions[0].options);
    return;
  }

  // answer buttons
  if (update.callback_query?.data?.startsWith('next:')) {
    await ack(update.callback_query.id);
    answers[index] = update.callback_query.data.slice(5);
    index++;

    if (index < questions.length) {
      await kv.put(stateKey, JSON.stringify({ questions, answers, index }));
      await ask(questions[index].question, questions[index].options);
      return;
    }

    // complete test: evaluate & upsert eng_level and tested_at
    const { level, report } = evaluate(questions, answers);
    const testedAt = new Date().toISOString();
    await env.USER_DB
      .prepare(
        `INSERT INTO user_profiles (telegram_id, eng_level, tested_at)
         VALUES (?, ?, ?)
         ON CONFLICT(telegram_id) DO UPDATE
           SET eng_level = excluded.eng_level,
               tested_at = excluded.tested_at`
      )
      .bind(parseInt(chatId, 10), level, testedAt)
      .run();

    await kv.delete(stateKey);
    await sendMessage(
      `Your level: ${level}\n${report}`,
      [[{ text: 'Free audio lesson', callback_data: 'lesson:free' }]]
    );
    return;
  }

  // trigger free audio lesson
  if (update.callback_query?.data === 'lesson:free') {
    await ack(update.callback_query.id);
    await sendMessage('Starting free audio lesson…');
    ctx.waitUntil(
      env.LESSON0.fetch('https://dummy.internal/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: chatId, action: 'start_free' })
      })
    );
    return;
  }

  // fallback
  if (update.message) {
    await sendMessage('Press /start to begin the placement test.');
  }
}

// GPT-based question generation
// In linguapulse-test-bot/worker.js, update the generateTest function
async function generateTest(env) {
  try {
    console.log("Sending request to OpenAI API for test generation");
    
    const res = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${env.OPENAI_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        temperature: 0.7,
        max_tokens: 800,
        messages: [
          { role: 'system', content: env.SYSTEM_PROMPT || 
          "You are an expert English language assessment specialist. Create questions to evaluate a person's English language proficiency according to CEFR levels (A1-C2). Each question should test grammar, vocabulary, or language usage." },
          { role: 'user', content: env.USER_PROMPT || "Generate 10 multiple-choice questions to assess English language proficiency. Each question must have 4 options (A, B, C, D) with only one correct answer. Questions should test grammar rules, vocabulary usage, or proper English expressions. Do NOT create general knowledge questions about history, geography, literature, etc. ONLY create English language assessment questions. Format the output as a JSON array with each question having 'question', 'options', and 'answer' fields." }
        ],
        response_format: { type: "json_object" } // Request JSON format directly
      })
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error("OpenAI API error:", errorText);
      throw new Error(`OpenAI API error: ${errorText}`);
    }

    const data = await res.json();
    console.log("OpenAI API response received");
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {
      console.error("Invalid API response structure:", JSON.stringify(data).substring(0, 200));
      throw new Error("Invalid API response structure");
    }
    
    let txt = data.choices[0].message.content.trim();
    console.log("Raw content length:", txt.length, "First 100 chars:", txt.substring(0, 100));
    
    // More robust JSON extraction
    if (txt.includes("```")) {
      const match = txt.match(/```(?:json)?([\s\S]+?)```/);
      if (match && match[1]) {
        txt = match[1].trim();
      } else {
        txt = txt.replace(/```json/g, '').replace(/```/g, '').trim();
      }
    }
    
    let parsed;
    try {
      parsed = JSON.parse(txt);
      console.log("Successfully parsed JSON");
    } catch (e) {
      console.error('generateTest parse error:', e, "Content:", txt);
      return getDefaultQuestions(); // Use fallback questions instead of throwing
    }

    const arr = Array.isArray(parsed) ? parsed : 
                Array.isArray(parsed.questions) ? parsed.questions : [];
                
    if (arr.length === 0) {
      console.error("Parsed to empty array, using default questions");
      return getDefaultQuestions();
    }
    
    console.log(`Returning ${arr.length} questions`);
    return arr.slice(0, 10).map(q => ({
      question: q.question,
      options: Array.isArray(q.options) ? q.options.slice(0, 4) : [],
      answer: q.answer
    }));
  } catch (error) {
    console.error("Error in generateTest:", error);
    return getDefaultQuestions();
  }
}

// Helper function to provide fallback questions
function getDefaultQuestions() {
  console.log("Using default questions");
  return [
    {
      question: "What is the correct way to form a question in the present simple tense?",
      options: ["You are going?", "Do you going?", "Are you go?", "Do you go?"],
      answer: "Do you go?"
    },
    {
      question: "Choose the correct sentence:",
      options: ["I have been to Paris last year.", "I went to Paris last year.", "I have went to Paris last year.", "I go to Paris last year."],
      answer: "I went to Paris last year."
    },
    {
      question: "What is the correct form of the verb in this sentence: 'She _____ TV every evening.'",
      options: ["watch", "watchs", "watches", "watching"],
      answer: "watches"
    },
    {
      question: "Which sentence is in the future tense?",
      options: ["I go to school.", "I went to school.", "I am going to school.", "I will go to school."],
      answer: "I will go to school."
    },
    {
      question: "Which word is an adverb?",
      options: ["quick", "quicken", "quickly", "quickness"],
      answer: "quickly"
    },
    {
      question: "Choose the correct preposition: 'I am afraid _____ spiders.'",
      options: ["from", "of", "about", "for"],
      answer: "of"
    },
    {
      question: "What is the correct comparative form of 'good'?",
      options: ["gooder", "more good", "better", "goodder"],
      answer: "better"
    },
    {
      question: "Which sentence contains a modal verb?",
      options: ["I eat breakfast every day.", "I am eating breakfast now.", "I should eat breakfast.", "I have eaten breakfast."],
      answer: "I should eat breakfast."
    },
    {
      question: "Choose the correct article: '_____ book on the table is mine.'",
      options: ["A", "An", "The", "No article needed"],
      answer: "The"
    },
    {
      question: "Which verb is irregular?",
      options: ["talk", "play", "work", "swim"],
      answer: "swim"
    }
  ];
}

// simple evaluation
function evaluate(questions, answers) {
  let correct = 0;
  const report = [];

  questions.forEach((q, i) => {
    if (answers[i] === q.answer) {
      correct++;
    } else {
      report.push(`- "${q.question}" Should be: ${q.answer}`);
    }
  });

  const pct = questions.length ? (correct / questions.length) : 0;
  const level = pct >= 0.9 ? 'C1'
              : pct >= 0.8 ? 'B2'
              : pct >= 0.6 ? 'B1'
              : pct >= 0.4 ? 'A2'
              : 'A1';
  return { level, report: report.join('\n') };
}
